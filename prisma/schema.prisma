// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Skill {
    id              Int      @id @default(autoincrement()) // Unique identifier for the skill
    name            String   @unique                      // Skill name must be unique
    percentage      Int                                   // Skill proficiency percentage
    iconUrl         String?                               // Optional URL for an external icon
    iconImage       String?                               // Optional base64 or file path for an icon image
    iconImageId     String?                               // Optional ID for the icon image in a storage system
    isHighlighted   Boolean   @default(false)             // Flag to indicate if the skill is highlighted
    primaryColor    String?                                // Primary color for representing the skill
    secondaryColor  String?                                // Secondary color for representing the skill
    createdAt       DateTime @default(now())              // Timestamp when the skill was created
}


model Experience {
  id            String   @id @default(uuid())   // Unique identifier for each experience
  title         String                               // Job title
  company       String                               // Company name
  companyUrl    String?                              // Optional URL for the company's website
  period        String                               // Duration (e.g., "Jan 2020 - Dec 2022")
  responsibilities String[]                           // List of responsibilities
  createdAt     DateTime @default(now())             // Timestamp for when the experience was created
  updatedAt     DateTime @updatedAt                  // Timestamp for when the experience was last updated
}

model Certification {
    id        Int     @id @default(autoincrement())
    certificationYear Int
    achieveCertifications String[] // Array of strings to store the names/details of certificates
}

model JobExperience {
  id            String   @id @default(cuid()) // Unique ID for the job experience
  title         String   // Job title (e.g., "Full Stack Developer")
  company       String   // Company name (e.g., "Sarathi Technosoft Pvt. Ltd")
  companyUrl    String   // URL of the company (optional, can be null)
  period        String   // Duration of the job (e.g., "Aug 2021 - Apr 2024")
  responsibilities String[] // List of responsibilities (required)
  createdAt     DateTime @default(now()) // Timestamp for when the record was created
  updatedAt     DateTime @updatedAt // Timestamp for when the record was last updated

  @@map("job_experiences") // Mapping to the table "job_experiences" in the database
}



model Blog {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  excerpt         String?  @db.Text
  content         String   @db.Text
  date            DateTime
  readTime        String   @db.VarChar(50) @map("read_time")
  slug            String   @db.VarChar(255) @unique
  thumbnail       String?  @db.Text        // URL of the uploaded image
  imageId         String?  @db.VarChar(255) // ID from the third-party server
  category        String?  @db.VarChar(255)
  tags            String[]
  isFeatured      Boolean  @default(false) @map("is_featured")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  seoTitle        String?  @db.VarChar(255) @map("seo_title")
  seoDescription  String?  @db.Text         @map("seo_description")
  seoKeywords     String[] @map("seo_keywords")

  @@map("blogs")
}

model Project {
  id              String     @id @default(cuid())
  title           String
  description     String
  content         String     @db.Text
  imageUrl        String     @map("image_url") // URL of the main image
  imageId         String     @map("image_id")  // ID of the main image from a third-party server
  technologies    String[]   // List of technologies used
  liveUrl         String?    // Link to the live demo (optional)
  githubUrl       String?    // Link to the GitHub repository (optional)
  gallery         Json    // Related images or screenshots with URL and ID
  challenges      String[]   // Challenges faced during development
  solutions       String[]   // Solutions implemented to overcome challenges
  timeline        String     // Timeline for the project
  slug            String     @unique // Unique identifier for URLs
  status          String     // Current status (e.g., Completed, In Progress)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  tags            String[]   // Additional tags for categorization
  seoTitle        String?    // SEO-friendly title for the project
  seoDescription  String?    // SEO-friendly description

  @@map("projects")
}

